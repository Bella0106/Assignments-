
1) 
Push (S,4) 
        1   2   3   4   5   6
S:      4   -   -   -   -   -
             ^
             |
           S.top = 1


PUSH ( S,1)
        1   2   3   4   5   6
S:      4   1   -   -   -   -
                 ^
                 |
               S.top = 2



PUSH (S,3)
        1   2   3   4   5   6
S:      4   1   3   -   -   -
                     ^
                     |
                   S.top = 3
POP (S,3)
       1   2   3   4   5   6
S:     4   1   3   -   -   -
                    ^
                    S.top = 3
PUSH S,8)
       1   2   3   4   5   6
S:     4   1   8   -   -   -
                    ^
                    S.top = 3
POP(S)
       1   2   3   4   5   6
S:     4   1   -   -   -   -
                ^
                S.top = 2
2) 
ENQUEUE(Q4)
        1   2   3   4   5   6
Q:      4   -   -   -   -   -
Head = 1   Tail = 2

ENQUEUE(Q,1)
        1   2   3   4   5   6
Q:      4   1   -   -   -   -
Head = 1   Tail = 3
ENQUEUE(Q,3)
        1   2   3   4   5   6
Q:      4   1   3   -   -   -
Head = 1   Tail = 4
DEQUEUE(Q)
         1   2   3   4   5   6
Q:      -   1   3   -   -   -
Head = 2   Tail = 4
ENQUEUE(Q,8)
        1   2   3   4   5   6
Q:      -   1   3   8   -   -
Head = 2   Tail = 5
DEQUEUE(Q)
         1   2   3   4   5   6
Q:      -   -   3   8   -   -
Head = 3   Tail = 5
3) This is a ENQUEUE with overflow check
if (Q.tail + 1 == Q.head or (Q.tail == Q.length and Q.head == 1)) then
    print "Queue Overflow"
else
    Q[Q.tail] = x
    if Q.tail == Q.length then
        Q.tail = 1
    else
        Q.tail = Q.tail + 1
DEQUEUE with underflow check
if Q.head == Q.tail then
    print "Queue Underflow"
else
    x = Q[Q.head]
    if Q.head == Q.length then
        Q.head = 1
    else
        Q.head = Q.head + 1
    return x
