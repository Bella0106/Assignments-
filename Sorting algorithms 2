1) Proof that Insertion Sort has average-case time complexitiy O(N^2) 
Average case 
* Sometimes you only need few comparisions , sometimes more 
* On average , each number moves half of the sorted part 
* So if you have N numbers , the total number of the comparison is like 
1+2+3+...+(N-1)=N^2/2--> O(N^2)
Example for a 5 numbers [ 5,2,4,6,1] 
Look at 2 ->compare it with 5 -> move 2 before 5 -> [2,5,4,6,1] 
Look at 4 ->compare with 5, then 2 -> insert 4 -. [2,4,5,6,1] 
Look at 6 ->compare with 5 -.insert-> [ 2,4,5,6,1}
Look at 1 -> compare with = 1+2+1+4=8 
Average case grow like N^2 , So O(N^2)
2) 
Worst-case scenario for N = 5
Array (worst case): [5, 4, 3, 2, 1]
| Step | Inspected Value | Comparisons / Moves         |
| ---- | --------------- | --------------------------- |
| 1    | 4               | 1 (compare 4<5)             |
| 2    | 3               | 2 (compare 3<5, 3<4)        |
| 3    | 2               | 3 (compare 2<5,2<4,2<3)     |
| 4    | 1               | 4 (compare 1<5,1<4,1<3,1<2) |

Total operations = 1 + 2 + 3 + 4 = 10 moves + 10 assignments → 20 operations
3) 
function containsX(string) {
	foundX = false;
	for(let i = 0; i < string.length; i++) { 
		if (string[i] === "X") {
			foundX = true; 
		}
	}
	return foundX; 
}
a) Time complexity:
Loop checks every letter → O(N)
b) 
Improved version 
function containsX(string) {
    for(let i = 0; i < string.length; i++) { 
        if (string[i] === "X") {
            return true; 
        }
    }
    return false; 
}
My Video; https://youtu.be/1n_pQTFcjno
